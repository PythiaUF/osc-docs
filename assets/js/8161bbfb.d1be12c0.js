"use strict";(self.webpackChunkosc_docs=self.webpackChunkosc_docs||[]).push([[672],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>k});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(i),c=a,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||r;return i?n.createElement(k,o(o({ref:t},u),{},{components:i})):n.createElement(k,o({ref:t},u))}));function k(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=i[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},1446:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=i(7462),a=(i(7294),i(3905));const r={title:"Contributing Guide",description:"Club Website Developer Contributing Guide",sidebar_position:9},o="Contributing Guide",l={unversionedId:"Developers/contributing-guide",id:"Developers/contributing-guide",title:"Contributing Guide",description:"Club Website Developer Contributing Guide",source:"@site/docs/website/Developers/contributing-guide.md",sourceDirName:"Developers",slug:"/Developers/contributing-guide",permalink:"/docs/website/Developers/contributing-guide",draft:!1,editUrl:"https://github.com/ufosc/osc-docs/blob/main/docs/website/Developers/contributing-guide.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Contributing Guide",description:"Club Website Developer Contributing Guide",sidebar_position:9},sidebar:"defaultSidebar",previous:{title:"Testing & Linting",permalink:"/docs/website/Developers/testing"},next:{title:"API Reference",permalink:"/docs/website/api-reference"}},s={},p=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Contribution workflow",id:"contribution-workflow",level:2},{value:"Commit Messages",id:"commit-messages",level:2},{value:"Writing messages",id:"writing-messages",level:3},{value:"Message prefixes",id:"message-prefixes",level:3},{value:"Pull Requests",id:"pull-requests",level:2},{value:"Opening issues",id:"opening-issues",level:2},{value:"Feature proposals",id:"feature-proposals",level:3},{value:"Bugs and errors",id:"bugs-and-errors",level:3},{value:"Typos",id:"typos",level:3},{value:"Fixing issues and implementing proposals",id:"fixing-issues-and-implementing-proposals",level:3},{value:"Standard README",id:"standard-readme",level:2},{value:"Standard JS",id:"standard-js",level:2},{value:"Labels",id:"labels",level:2},{value:"Maintainers",id:"maintainers",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...i}=e;return(0,a.kt)(m,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"contributing-guide"},"Contributing Guide"),(0,a.kt)("admonition",{title:"Static Copy",type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This is a copy of the contributing guide originally hosted on Github, reproduced here solely for presentation purposes. It may not be up-to-date. Developers should refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ufosc/Club_Website_2/blob/main/CONTRIBUTING.md"},"original copy")," whenever possible.")),(0,a.kt)("p",null,"The OSC website is free and open source software, all contributions are welcome and appreciated so long as they comply with AGPL-3.0-or-later licensing. To expedite the submission and review process, we urge all contributors to familiarize themselves with the following contribution guidelines."),(0,a.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#contribution-workflow"},"Contribution Workflow")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#commit-messages"},"Commit Messages"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#writing-messages"},"Writing Messages")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#message-prefixes"},"Message Prefixes")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#pull-requests"},"Pull Requests")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#opening-issues"},"Opening Issues"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#feature-proposals"},"Feature Proposals")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#bugs-and-errors"},"Bugs & Errors")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#typos"},"Typos")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#fixing-issues-and-implementing-proposals"},"Fixing Issues & Implementing Proposals")))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#standard-readme"},"Standard README")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#standard-js"},"Standard JS")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#labels"},"Labels")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#maintainers"},"Maintainers"))),(0,a.kt)("h2",{id:"contribution-workflow"},"Contribution workflow"),(0,a.kt)("p",null,"Always discuss big changes by speaking with your group, by contacting a maintainer or by opening a discussion issue (see ",(0,a.kt)("a",{parentName:"p",href:"#opening-issues"},"opening issues"),")."),(0,a.kt)("p",null,"Suggested workflow:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"(Optional) fork the project repository."),(0,a.kt)("li",{parentName:"ol"},"Checkout a new branch from ",(0,a.kt)("inlineCode",{parentName:"li"},"main"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"ALWAYS branch from the latest version of ",(0,a.kt)("inlineCode",{parentName:"li"},"main"),"."),(0,a.kt)("li",{parentName:"ul"},"Each PR/feature goes on its own branch (again, branched from ",(0,a.kt)("inlineCode",{parentName:"li"},"main"),"). This ensures that new features are not dependent on uncommitted code."))),(0,a.kt)("li",{parentName:"ol"},"Commit changes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Refer to ",(0,a.kt)("a",{parentName:"li",href:"#commit-messages"},"Commit Messages")," for writing commit messages."),(0,a.kt)("li",{parentName:"ul"},'Each commit should be small and specific, don\'t try to push large/generic commits like "updated app" or "updated to requested changes".'),(0,a.kt)("li",{parentName:"ul"},"Each commit should describe a change to the codebase. You can nest multiple files under a commit, as long as the message applies to both."),(0,a.kt)("li",{parentName:"ul"},"Small, specific commits allow maintainers to easily revert/modify changes, keep track of versions and detect problems."),(0,a.kt)("li",{parentName:"ul"},"Messed up your commit history? Its ok, maintainers are the ones ultimately responsible for maintaining messages."))),(0,a.kt)("li",{parentName:"ol"},"Write unit tests (if needed)."),(0,a.kt)("li",{parentName:"ol"},"Once you're finished making changes...",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Open a terminal and run ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run test")," to test your code."),(0,a.kt)("li",{parentName:"ul"},"If tests fail, it's your responsibility to fix breaking changes."),(0,a.kt)("li",{parentName:"ul"},"Lint your code with ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run fix"),". This will (try to) automatically fix your code syntax for you."),(0,a.kt)("li",{parentName:"ul"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run lint")," to check for any remaining syntax issues. Please fix these."))),(0,a.kt)("li",{parentName:"ol"},"Push to origin with ",(0,a.kt)("inlineCode",{parentName:"li"},"git push origin [your branch name]")," on your terminal."),(0,a.kt)("li",{parentName:"ol"},"Create a pull request.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If you've made changes to a fork, make sure you're opening a pull request to the original remote repository."),(0,a.kt)("li",{parentName:"ul"},"Always open PR's on the ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch unless otherwise instructed. Convoluted merge histories create dependency hell and are hard to review."),(0,a.kt)("li",{parentName:"ul"},"Add a descriptive title and describe your changes."),(0,a.kt)("li",{parentName:"ul"},"Refer to ",(0,a.kt)("a",{parentName:"li",href:"#pull-requests"},"Pull Requests")))),(0,a.kt)("li",{parentName:"ol"},"Wait for your code to be reviewed and repeat steps 3-6 for any requested changes.")),(0,a.kt)("h2",{id:"commit-messages"},"Commit Messages"),(0,a.kt)("p",null,"Commits and commit messages should be written for each (loosely) independent change made. It goes without saying that messages should be as specific as possible - if a change can't be described in a single sentence then it probably has to be broken down into multiple commits."),(0,a.kt)("p",null,"Messed up your commit history? That's ok, maintainers are the ones ultimately responsible for maintaining commit messages."),(0,a.kt)("h3",{id:"writing-messages"},"Writing messages"),(0,a.kt)("p",null,"That said, avoid commiting large changes all at once: messages like ",(0,a.kt)("inlineCode",{parentName:"p"},"updated app")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"fixed problem")," should be broken down into their specific constituents. For example:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"fixed problem")," should ideally be broken up into multiple commits like ",(0,a.kt)("inlineCode",{parentName:"li"},"fix: added missing form validation")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"fix: typo"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"updated app"),": What exactly did you update and how did you do it? Break up each change into a commit like ",(0,a.kt)("inlineCode",{parentName:"li"},"feat: added form element for xyz"),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"feat: added password field"),".")),(0,a.kt)("h3",{id:"message-prefixes"},"Message prefixes"),(0,a.kt)("p",null,"We recommend adding the following prefixes to your commit messages. These aren't necessary, but they keep the commit history clean-looking:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"feat: ..."),": For new features."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"docs: ..."),": For adding or changing documentation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ci: ..."),": For modifying CI, jobs or workflows"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fix: ..."),": For when you've fixed something."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"lint: ..."),": For when you've fixed/changed code syntax."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"refactor: ..."),": For when you've rewritten or reorganized something. Use this if you've moved files or created folders. This is different from ",(0,a.kt)("inlineCode",{parentName:"li"},"lint")," because it doesn't necessarily describe syntactical changes, it describes organizational changes."),(0,a.kt)("li",{parentName:"ul"},"Does your specific change not apply to any of these? Use your own best judgement.")),(0,a.kt)("h2",{id:"pull-requests"},"Pull Requests"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Always discuss big changes with by speaking to your group, by contacting a maintainer or by opening a discussion issue (see ",(0,a.kt)("a",{parentName:"li",href:"#opening-issues"},"opening issues"),"). This increases the likelihood that they'll be accepted."),(0,a.kt)("li",{parentName:"ol"},"Always open pull requests on the ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," branch."),(0,a.kt)("li",{parentName:"ol"},"Each branch and pull request should only feature 1 significant change. We might like one feature but not like the other - if they're on separate PRs we can approve/reject them easily, otherwise you'll have to do a lot of refactoring."),(0,a.kt)("li",{parentName:"ol"},"Add an appropriate title. Like commit messages, your PR titles should be intuitive to understand and should give a good overview of what you've accomplished."),(0,a.kt)("li",{parentName:"ol"},"Add a description. Explain what you've done and why you've done it - it might be useful to include code blocks and explain your reasoning.")),(0,a.kt)("h2",{id:"opening-issues"},"Opening issues"),(0,a.kt)("h3",{id:"feature-proposals"},"Feature proposals"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add an appropriate title."),(0,a.kt)("li",{parentName:"ol"},"Explain your proposed feature and why it might be useful."),(0,a.kt)("li",{parentName:"ol"},"(Optional) Suggest an approach/method for it to be done."),(0,a.kt)("li",{parentName:"ol"},"(Optional) Request to be assigned if you want to implement the proposal yourself."),(0,a.kt)("li",{parentName:"ol"},"(Optional) Add the github ",(0,a.kt)("inlineCode",{parentName:"li"},"proposal")," issue label.")),(0,a.kt)("h3",{id:"bugs-and-errors"},"Bugs and errors"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add an appropriate title."),(0,a.kt)("li",{parentName:"ol"},"Explain the bug/error you've encountered."),(0,a.kt)("li",{parentName:"ol"},"Add a list of steps to reproduce the problem."),(0,a.kt)("li",{parentName:"ol"},"(Optional) Add a screenshot."),(0,a.kt)("li",{parentName:"ol"},"(Optional) Add the github ",(0,a.kt)("inlineCode",{parentName:"li"},"bug")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"error")," label.")),(0,a.kt)("h3",{id:"typos"},"Typos"),(0,a.kt)("p",null,"Dont open issues for typos, just fix them and create a PR."),(0,a.kt)("h3",{id:"fixing-issues-and-implementing-proposals"},"Fixing issues and implementing proposals"),(0,a.kt)("p",null,"Please ask (by replying to the conversation) before trying to fix an issue or implement a feature proposal. Don't waste your time: the issue might be outdated, someone else might already be assigned or we might be waiting for more information."),(0,a.kt)("h2",{id:"standard-readme"},"Standard README"),(0,a.kt)("p",null,"This repository adheres to the README standard style described ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/RichardLitt/standard-readme"},"here"),". Please adhere to the standard when making or requesting changes."),(0,a.kt)("p",null,"Maintainers are responsible for enforcement."),(0,a.kt)("h2",{id:"standard-js"},"Standard JS"),(0,a.kt)("p",null,"This repository adheres to Javascript Standard syntax described ",(0,a.kt)("a",{parentName:"p",href:"https://standardjs.com/"},"here"),". Contributors can run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run lint")," to list syntax issues that need to be fixed for adherence, or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run fix")," to (try to) automatically fix some of them."),(0,a.kt)("p",null,"Maintainers are responsible for enforcement."),(0,a.kt)("h2",{id:"labels"},"Labels"),(0,a.kt)("p",null,"Refer to this guideline on what labels to use and look for when deciding on what to contribute to."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bug/error"),": Something isn't working properly."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"difficulty"),": How hard the issue is to resolve (easy, medium, hard)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"discussion"),": Should be discussed before moving forward."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"documentation"),": Related to the documentation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duplicate"),": It already exists."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"good first issue"),": Friendly for beginners to work on."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"help wanted"),": Someone is needed to work on it."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"priority"),": How important it needs to be worked on (low, medium, high)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"proposal"),": Brings up a new idea."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"question"),": Requesting more information."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"wontfix"),": Won't be worked on anymore.")),(0,a.kt)("h2",{id:"maintainers"},"Maintainers"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Review all PRs before merging."),(0,a.kt)("li",{parentName:"ol"},"When upgarding the release version:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Create a ",(0,a.kt)("inlineCode",{parentName:"li"},"BUMP X.X.X")," commit message (where ",(0,a.kt)("inlineCode",{parentName:"li"},"X.X.X")," is the version). If anyone ever wants to revert to a particular version, they can just modify the git history head to point to this commit."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"package.json")," contains a version tag, make sure it gets updated."),(0,a.kt)("li",{parentName:"ul"},"Create a github release."))),(0,a.kt)("li",{parentName:"ol"},"Enforce Standard README style."),(0,a.kt)("li",{parentName:"ol"},"Enforce unit testing: ask contributors to write unit tests and fix failing PRs."),(0,a.kt)("li",{parentName:"ol"},"Enforce Javascript Standard style: ask contributors to ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run lint")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run fix"),"."),(0,a.kt)("li",{parentName:"ol"},"Enforce commit history: rebase commit messages if required."),(0,a.kt)("li",{parentName:"ol"},"Discuss big changes with the group."),(0,a.kt)("li",{parentName:"ol"},"Ask another maintainer to peer-review your code.")))}d.isMDXComponent=!0}}]);